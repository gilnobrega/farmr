# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: farmr_client

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        architecture: [x86_64, aarch64]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive     

      - name: Download dart sdk x64
        if: matrix.architecture == 'x86_64'
        run: curl https://storage.googleapis.com/dart-archive/channels/stable/release/latest/sdk/dartsdk-linux-x64-release.zip -o dart-${{ matrix.architecture }}.zip

      - name: Download dart sdk arm64
        if: matrix.architecture == 'aarch64'
        run: curl https://storage.googleapis.com/dart-archive/channels/stable/release/latest/sdk/dartsdk-linux-arm64-release.zip -o dart-${{ matrix.architecture }}.zip

      - name: Create dummy scripts
        run: |
             mkdir -p dart-aarch64/dart-sdk/bin/
             mkdir -p dart-x86_64/dart-sdk/bin/
             cp .github/workflows/dummydart.sh dart-aarch64/dart-sdk/bin/dart
             cp .github/workflows/dummydart.sh dart-x86_64/dart-sdk/bin/dart
             cp .github/workflows/dummydart.sh farmr.exe
             chmod 755 dart-aarch64/dart-sdk/bin/dart
             chmod 755 dart-x86_64/dart-sdk/bin/dart
             chmod 755 farmr.exe
             sudo rm -rf dart-${{ matrix.architecture }}
        
      - name: Decompresses dart-${{ matrix.architecture }}.zip
        uses: TonyBogdanov/zip@1.0
        with:
          args: unzip -qq ./dart-${{ matrix.architecture }}.zip -d ./dart-${{ matrix.architecture }}

      - name: Setup dev files
        run: |
             sudo chmod -R 755 dart-${{ matrix.architecture }}
             mv .github/workflows/config.test .github/workflows/config.yaml
             mv .github/workflows/farmr.sh ./farmr.sh
             mv .github/workflows/hpool.sh ./hpool.sh
             chmod +x ./farmr.sh
             chmod +x ./hpool.sh

      - uses: uraimo/run-on-arch-action@v2.1.0
        name: Compile aarch64
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu20.04
          install: |
               apt-get update -q -y
               apt-get install -q -y git
          run: |
               ./dart-aarch64/dart-sdk/bin/dart pub get
               ./dart-aarch64/dart-sdk/bin/dart run environment_config:generate
               ./dart-aarch64/dart-sdk/bin/dart compile exe farmr.dart
               ./dart-aarch64/dart-sdk/bin/dart compile exe farmr_package.dart
               ./farmr.exe harvester onetime standalone headless

      - name: Compile x86_64
        if: matrix.architecture == 'x86_64'
        run: |
             ./dart-x86_64/dart-sdk/bin/dart pub get
             ./dart-x86_64/dart-sdk/bin/dart run environment_config:generate
             ./dart-x86_64/dart-sdk/bin/dart compile exe farmr.dart
             ./dart-x86_64/dart-sdk/bin/dart compile exe farmr_package.dart
             ./farmr.exe harvester onetime standalone headless

      - name: Renames farmr binary
        run: |
             chmod +x ./farmr.exe
             mv ./farmr.exe ./farmr
             mv ./farmr_package.exe ./farmr_package

      - name: Load .env file
        uses: xom9ikk/dotenv@v1.0.2

      - name: Compressing ${{ matrix.architecture }} .tar.gz
        run: tar -czvf ./farmr-linux-${{ matrix.architecture }}.tar.gz farmr blockchain farmr.sh hpool.sh 

      - name: Build .deb file for ${{ matrix.architecture }}
        uses: kentik/pkg@v1.0.0-rc7
        with:
          name: farmr
          version: ${{ env.version }}
          arch: ${{ matrix.architecture }}
          format: deb
          package: .github/package.yaml

      - name: Build .rpm file for ${{ matrix.architecture }}
        uses: kentik/pkg@v1.0.0-rc7
        with:
          name: farmr
          version: ${{ env.version }}
          arch: ${{ matrix.architecture }}
          format: rpm
          package: .github/package.yaml

      - name: Renaming amd64 .deb
        run: mv farmr_${{ env.version }}-1_amd64.deb farmr-ubuntu-${{ matrix.architecture }}.deb 2>/dev/null
        continue-on-error: true

      - name: Renaming arm64 .deb
        run: mv farmr_${{ env.version }}-1_arm64.deb farmr-ubuntu-${{ matrix.architecture }}.deb 2>/dev/null
        continue-on-error: true

      - name: Renaming .rpm
        run: mv farmr-${{ env.version }}-1.${{ matrix.architecture }}.rpm farmr-fedora-${{ matrix.architecture }}.rpm 2>/dev/null
        continue-on-error: true

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          release_name: v${{ env.version }}
          draft: true
          files: |
            ./farmr-linux-${{ matrix.architecture }}.tar.gz
            ./farmr-ubuntu-${{ matrix.architecture }}.deb
            ./farmr-fedora-${{ matrix.architecture }}.rpm 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # You don't need to add this in secrets it's by default.

  inferiorOSes:
    # A strategy is used to define various build environments this job will run.
    #
    # To say it simple, this will create 3 separate independent jobs which will
    # run on ubuntu, mac & windows.
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        architecture: [x64]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive     
                
      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      - uses: dart-lang/setup-dart@v1.2
        with:
          architecture: ${{ matrix.architecture }}
          sdk: stable

      - name: Install dependencies
        run: dart pub get

      - name: Generate EnvironmentConfig
        run: dart run environment_config:generate

     # - name: Analyze project source
     #   run: dart analyze

      - name: Load .env file
        uses: xom9ikk/dotenv@v1.0.2

      - name: Building macOS release
        if: matrix.os == 'macos-latest'
        run: |
             mv .github/workflows/config.test .github/workflows/config.yaml
             mv .github/workflows/farmr.sh ./farmr.sh
             chmod +x ./farmr.sh
             mv .github/workflows/hpool.sh ./hpool.sh
             chmod +x ./hpool.sh
             dart compile exe farmr.dart
             chmod +x farmr.exe
             ./farmr.exe harvester onetime standalone headless
             mv farmr.exe farmr
             tar -czvf ./farmr-macOS-${{ matrix.architecture }}.tar.gz farmr blockchain farmr.sh hpool.sh 
             
      - name: Building Windows release
        if: matrix.os == 'windows-latest'
        run: |
             mv .github/workflows/config.test .github/workflows/config.yaml
             dart compile exe farmr.dart
             dart compile exe farmr_hpool.dart
             ./farmr.exe harvester onetime standalone headless
             move ./farmr.exe ./farmr.exe
             move ./farmr_hpool.exe ./hpool.exe

      - name: Created windows zip file
        shell: bash
        if: matrix.os == 'windows-latest'
        run: |
          # Pack files WINDOWS
          7z a -tzip "farmr-windows-${{ matrix.architecture }}.zip" "./*.exe" "./blockchain" "./*.dll"

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          release_name: v${{ env.version }}
          draft: true
          files: |
            ./farmr-windows-${{ matrix.architecture }}.zip
            ./farmr-macOS-${{ matrix.architecture }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # You don't need to add this in secrets it's by default.
          
          
